{
  "slug": "babel",
  "repo": "Laboratoria/curricula-js",
  "path": "topics/babel",
  "version": "2.1.0",
  "parserVersion": "1.2.0",
  "track": "js",
  "locale": "es-ES",
  "createdAt": "2019-02-13T17:13:22.260Z",
  "title": "Babel",
  "description": "<p>Javascript es un lenguage vivo, que a&#xF1;o a a&#xF1;o se va actualizando\ncon nuevas APIs y estructuras sint&#xE1;cticas.</p>\n<p>Este proceso evolutivo hace que exista una ventana de tiempo entre\nel momento en que una nueva funcionalidad queda aprobada en el lenguaje,\ny el momento que es implementada por todos los navegadores y entornos.</p>\n<p>Babel nace para poder solucionar este problema y permitirnos utilizar\nnuevas funcionalidades de ECMAScript, convirti&#xE9;ndo este codigo *&quot;moderno&quot;*\nen c&#xF3;digo compatible con versiones de Javascript soportadas por los navegadores\ny entornos mas populares (l&#xE9;ase <code>chrome</code>, <code>firefox</code>, <code>node</code>, etc).</p>\n\n",
  "tags": {
    "primary": {
      "babel": true,
      "compiler": true,
      "transpiler": true,
      "js": true,
      "jsx": true,
      "es6": true
    },
    "secondary": {}
  },
  "targetAudience": "<p>Este curso está dirigido a personas con conocimientos previos de <strong>javascript</strong>,\nque desean poder utilizar nuevos aspectos del lenguaje en sus proyectos,\nsin necesidad de tener que esperar a que estos lleguen a ser implementados\nen los entornos que utilizan.</p>\n",
  "dependencies": "<p>Para poder llevar adelante este curso sin frustración, es recomendable los\nsiguientes conocimientos previos:</p>\n<ul>\n<li>Manejo de línea de comandos (*nix)</li>\n<li>Javascript básico en entorno servidor: <code>node</code> y <code>npm</code></li>\n</ul>\n",
  "learningObjectives": "<ul>\n<li>Qué es <code>babel</code> y para qué sirve</li>\n<li>Cómo usarlo</li>\n<li>Cómo configurarlo</li>\n<li>Plugins y presets populares</li>\n</ul>\n",
  "product": "",
  "syllabus": {
    "02-foo": {
      "title": "Foo",
      "bonus": false,
      "description": "",
      "parts": {
        "01-what-is-foo": {
          "title": "¿Qué es Foo?",
          "type": "read",
          "format": "self-paced",
          "duration": 10,
          "body": "...",
          "durationString": "10min"
        }
      },
      "order": 1,
      "stats": {
        "duration": 10,
        "durationString": "10min",
        "exerciseCount": 0,
        "partCount": 1
      }
    },
    "01-intro": {
      "title": "Conceptos básicos",
      "bonus": false,
      "description": "",
      "parts": {
        "01-what-is-babel": {
          "title": "¿Qué es Babel?",
          "type": "read",
          "format": "self-paced",
          "duration": 10,
          "body": "<h2 id=\"babel-es-un-compilador-de-javascript\">Babel es un compilador de Javascript</h2>\n<p>Babel es una herramienta que se usa principalmente para convertir c&#xF3;digo\nECMAScript 2015+ en c&#xF3;digo compatible hacia atr&#xE1;s con versiones de JavaScript\nactualmente soportadas por navegadores antiguos y otros entornos.\nEstas son los principales tareas que puedes realizar con Babel:</p>\n<ul>\n<li>Transformar sintaxis</li>\n<li>Aplicar &quot;Polyfills&quot; de funcionalidades faltantes en ciertos entornos\n(a trav&#xE9;s de <a href=\"https://babeljs.io/docs/en/babel-polyfill\" target=\"_blank\">@babel/polyfill</a>)</li>\n<li>Transformar tu c&#xF3;digo fuente (codemods)</li>\n<li>Y m&#xE1;s! (revisa estos <a href=\"https://babeljs.io/videos.html\" target=\"_blank\">videos</a> para m&#xE1;s inspiraci&#xF3;n)</li>\n</ul>\n<pre><code class=\"language-js\">// Input: arrow function de ES2015\n[1, 2, 3].map((n) =&gt; n + 1);\n\n// Output: Su equivalente en ES5\n[1, 2, 3].map(function(n) {\n  return n + 1;\n});</code></pre>\n<blockquote>\n<p>Para saber m&#xE1;s de compiladores, revisa el incre&#xED;ble tutorial\n<a href=\"https://github.com/thejameskyle/the-super-tiny-compiler\" target=\"_blank\">the-super-tiny-compiler</a>,\nque tambi&#xE9;n explica a grandes rasgos c&#xF3;mo funciona Babel.</p>\n</blockquote>\n<h2 id=\"es2015-y-m&#xE1;s-all&#xE1;\">ES2015 y m&#xE1;s all&#xE1;</h2>\n<p>Babel brinda soporte para las &#xFA;ltimvas versiones de JavaScript a trav&#xE9;s de\n&quot;syntax transformers&quot;.</p>\n<p>Estos <a href=\"https://babeljs.io/docs/en/plugins\" target=\"_blank\">plugins</a> te permiten\nusar <em>ahora mismo</em> nuevas funcionalidades sint&#xE1;cticas, sin tener que esperar a\nque los navegadores o entornos brinden soporte.</p>\n<h2 id=\"jsx-y-react\">JSX y React</h2>\n<p>Babel tambi&#xE9;n puede transformar sintaxis JSX! Revisa el <a href=\"https://babeljs.io/docs/en/babel-preset-react\" target=\"_blank\">preset para React</a>\npara comenzar.</p>\n<p>Puedes instalar el preset con el siguiente comando</p>\n<pre><code class=\"language-shell\">npm install --save-dev @babel/preset-react</code></pre>\n<p>y agregas <code>@babel/preset-react</code> a tu configuraci&#xF3;n de Babel\n(m&#xE1;s sobre en la pr&#xF3;xima unidad) y ya puedes comenzar a utilizar JSX</p>\n<pre><code class=\"language-jsx\">const Greeting = ({ to }) =&gt; (\n  &lt;div&gt;Hello {to}&lt;/div&gt;\n);</code></pre>\n<p>se convierte en</p>\n<pre><code class=\"language-js\">var Greeting = function Greeting(_ref) {\n  var to = _ref.to;\n  return React.createElement(\n    &quot;div&quot;,\n    null,\n    &quot;Hello &quot;,\n    to\n  );\n};</code></pre>\n<blockquote>\n<p>M&#xE1;s de JSX en su <a href=\"https://facebook.github.io/jsx/\" target=\"_blank\">documentaci&#xF3;n oficial</a></p>\n</blockquote>\n<h2 id=\"anotaciones-de-tipos-para-flow-y-typescript\">Anotaciones de Tipos (para Flow y TypeScript)</h2>\n<p>Babel tambi&#xE9;n puede encargarse que extraer tus anotaciones!\nRevisa los presets para <a href=\"https://babeljs.io/docs/en/babel-preset-flow\" target=\"_blank\">Flow</a>\no <a href=\"https://babeljs.io/docs/en/babel-preset-typescript\" target=\"_blank\">TypeScript</a>.\nRecuerda que tanto typescript como flow deben seguir siendo utilizados para realizar\nel chequeo de tipos, ya que Babel no se encarga de esa tarea.</p>\n<p>Instalas el preset flow</p>\n<pre><code class=\"language-shell\">npm install --save-dev @babel/preset-flow</code></pre>\n<p>y puedes comenzar a usar <a href=\"https://flow.org/\" target=\"_blank\">Flow</a> manteniendo\ntu c&#xF3;digo compatilble</p>\n<pre><code class=\"language-js\">// @flow\nconst square = (n: number): number =&gt; {\n  return n * n;\n}</code></pre>\n<p>cuando Babel quita las anotaciones queda:</p>\n<pre><code class=\"language-js\">var square = function square(n) {\n  return n * n;\n};</code></pre>\n<p>An&#xE1;logamente para <a href=\"https://www.typescriptlang.org/\" target=\"_blank\">Typescript</a></p>\n<pre><code class=\"language-shell\">npm install --save-dev @babel/preset-typescript</code></pre>\n<pre><code class=\"language-js\">function Greeter(greeting: string) {\n    this.greeting = greeting;\n}</code></pre>\n<p>se convierte en</p>\n<pre><code class=\"language-js\">function Greeter(greeting) {\n    this.greeting = greeting;\n}</code></pre>\n<blockquote>\n<p>Puedes experimentar con las transformaciones de sintaxis\nen <a href=\"https://babeljs.io/repl\" target=\"_blank\">Babel REPL</a></p>\n</blockquote>\n<h2 id=\"extensibilidad\">Extensibilidad</h2>\n<p>Babel est&#xE1; constru&#xED;do a trav&#xE9;s de plugins.\nCompone tu propia secuencia de transformaciones usando plugins existentes\no creando los tuyos propios.\nUsa f&#xE1;cilmente un conjuto de plugin usando o creando presets\n<a href=\"https://babeljs.io/docs/en/presets\" target=\"_blank\">preset</a>.</p>\n<p>Para saber m&#xE1;s sobre plugins &#x2192; <a href=\"https://babeljs.io/docs/en/plugins\" target=\"_blank\">https://babeljs.io/docs/en/plugins</a></p>\n<blockquote>\n<p>Si quieres crear tu propio plugin, te recomendamos\ncomenzar usando el\n<a href=\"https://github.com/babel/generator-babel-plugin\" target=\"_blank\">generator-babel-plugin</a>\npara generar una plantilla.</p>\n<pre><code class=\"language-javascript\">// Un plugin no es m&#xE1;s que una funci&#xF3;n\nexport default function ({types: t}) {\n  return {\n    visitor: {\n      Identifier(path) {\n        let name = path.node.name; // invierte el nombre: JavaScript -&gt; &gt; tpircSavaJ\n        path.node.name = name.split(&apos;&apos;).reverse().join(&apos;&apos;);\n      }\n    }\n  };\n}</code></pre>\n</blockquote>\n",
          "durationString": "10min"
        },
        "02-usage": {
          "title": "Guía de uso",
          "type": "read",
          "format": "self-paced",
          "duration": 20,
          "body": "<p>En esta unidad haremos una introducci&#xF3;n a todas las herramientas que\nprovee Babel.</p>\n<blockquote>\n<p>Si est&#xE1;s usando un framework en particular,\nseguramente alguien ya se encarg&#xF3; de crear una configuraci&#xF3;n de babel para ti.\nRevisa la <a href=\"https://babeljs.io/setup.html\" target=\"_blank\">gu&#xED;a interactiva de setup</a> antes de\ncomenzar desde cero.</p>\n</blockquote>\n<h2 id=\"overview\">Overview</h2>\n<p>Esta gu&#xED;a te acompa&#xF1;ar&#xE1; a trav&#xE9;s de los pasos necesarios para compilar\ntu aplicaci&#xF3;n JavaScript que usa sintaxis ES2015+, en c&#xF3;digo que funcione\nen navegadores actuales. Esto involucrar&#xE1; tanto transformar la nueva sintaxis,\ncomo aplicar polyfills para las funcionalidades inexistentes.</p>\n<p>El proceso completo para configurar esto implica lo siguiente:</p>\n<ol>\n<li><p>Ejecutar los siguientes comandos para instalar los paquetes necesarios:</p>\n<pre><code class=\"language-sh\">npm install --save-dev @babel/core @babel/cli @babel/preset-env\nnpm install --save @babel/polyfill</code></pre>\n</li>\n<li><p>Crear un archivo de configuraci&#xF3;n <code>babel.config.js</code> en la ra&#xED;z de tu\nproyecto con el siguiente contenido:</p>\n<pre><code class=\"language-js\">const presets = [\n  [\n    &quot;@babel/env&quot;,\n    {\n      targets: {\n        edge: &quot;17&quot;,\n        firefox: &quot;60&quot;,\n        chrome: &quot;67&quot;,\n        safari: &quot;11.1&quot;,\n      },\n      useBuiltIns: &quot;usage&quot;,\n    },\n  ],\n];\n\nmodule.exports = { presets };</code></pre>\n<blockquote>\n<p>La lista de navegadores seleccionada, es completamente arbitraria.\nDeber&#xE1;s adaptarla seg&#xFA;n tus propios requerimientos.</p>\n</blockquote>\n</li>\n<li><p>Y ejecutar el siguiente comando para compilar tu c&#xF3;digo del directoria <code>src</code>\na <code>lib</code>:</p>\n<pre><code class=\"language-sh\">./node_modules/.bin/babel src --out-dir lib</code></pre>\n<blockquote>\n<p>Puedes usar el package runner que viene inclu&#xED;do en <a href=\"mailto:npm@5.2.0\" target=\"_blank\">npm@5.2.0</a> para acortar\neste comando, reemplazando <code>./node_modules/.bin/babel</code> por <code>npx babel</code></p>\n</blockquote>\n</li>\n</ol>\n<p>Contin&#xFA;a leyendo para una explicaci&#xF3;n detallada de cada una de estos pasos.</p>\n<h2 id=\"uso-b&#xE1;sico-de-la-l&#xED;nea-de-comando\">Uso b&#xE1;sico de la l&#xED;nea de comando</h2>\n<p>Todos los m&#xF3;dulos de Babel que vayas a necesitar, se encuentran publicados\ncomo paquetes independientes de npm, dentro del namespace <code>@babel</code>\n(desde la versi&#xF3;n 7).\nEste dise&#xF1;o modular expone diferentes herramientas, cada una dise&#xF1;ada para un\nuso espec&#xED;fico. En esta secci&#xF3;n analizaremos <code>@babel/core</code> y <code>@babel/cli</code>.</p>\n<h3 id=\"core-library\">Core Library</h3>\n<p>La funcionalidad central de Babel reside dentro del m&#xF3;dulo\n<a href=\"https://babeljs.io/docs/en/babel-core\" target=\"_blank\">@babel/core</a>. Luego de instalarlo:</p>\n<pre><code class=\"language-sh\">npm install --save-dev @babel/core</code></pre>\n<p>puedes usar <code>require</code> directamente en tu programa\ny usarlo de la siguiente forma:</p>\n<pre><code class=\"language-js\">const babel = require(&quot;@babel/core&quot;);\n\nbabel.transform(&quot;code&quot;, optionsObject);</code></pre>\n<blockquote>\n<p>Como usuario final, probablemente lo que quieras hacer es instalar otras\nherramientans que sirvan de interfaz con <code>@babel/core</code>. Inclusive si este\nes el caso, quiz&#xE1;s todavia quieras revisar su documentaci&#xF3;n para aprender\nque opciones puede recibir.</p>\n</blockquote>\n<h3 id=\"l&#xED;nea-de-comando\">L&#xED;nea de comando</h3>\n<p><a href=\"https://babeljs.io/docs/en/babel-cli\" target=\"_blank\">@babel/cli</a> es la herramienta que te\npermite usar babel desde tu terminal. Aqu&#xED; c&#xF3;mo instalarla y un ejemplo\nb&#xE1;sico de c&#xF3;mo usarla:</p>\n<pre><code class=\"language-sh\">npm install --save-dev @babel/core @babel/cli\n\n./node_modules/.bin/babel src --out-dir lib</code></pre>\n<p>Este comando se encargar&#xE1; de <em>parsear</em> (del ingl&#xE9;s <em>parse</em>: an&#xE1;lisis de\nsintaxis) todos los archivos JavaScript dentro del directorio <code>src</code>, aplicar\ntodas las transformaciones que hayamos configurado y colocar cada archivo\ntransformado dentro del directorio <code>lib</code>. Como todav&#xED;a no le hemos indicado qu&#xE9;\ntransformaciones aplicar, el resultado ser&#xE1; id&#xE9;ntico al original (exceptuando el\nformato). Podemos especificar qu&#xE9; transformaciones queremos aplicar, pas&#xE1;ndolas\ncomo opciones.</p>\n<p>Arriba usamos la opci&#xF3;n <code>--out-dir</code>. Puedes ver el resto de opciones disponibles\npasando la opci&#xF3;n<code>--help</code>. Pero las opciones m&#xE1;s relevantes a esta altura son\n<code>--plugins</code> y <code>--presets</code>.</p>\n<h2 id=\"plugins-y-presets\">Plugins y Presets</h2>\n<p>Las transformaciones se presentan en forma de plugins, que son peque&#xF1;os\nprogramas en JavaScript, que le indican a Babel c&#xF3;mo transformar tu c&#xF3;digo.\nRecuerda que puedes escribir tus propios plugins para aplicar las\ntransformaciones que quieras a tu c&#xF3;digo. Pero para transformar sintaxis\nES2015+ en ES5 te recomendamos utilizar plugins oficiales como por ejemplo\n<code>@babel/plugin-transform-arrow-functions</code>:</p>\n<pre><code class=\"language-sh\">npm install --save-dev @babel/plugin-transform-arrow-functions\n\n./node_modules/.bin/babel src --out-dir lib --plugins=@babel/plugin-transform-arrow-functions</code></pre>\n<p>Ahora cualquier funci&#xF3;n flecha en tu c&#xF3;digo ser&#xE1; transformada en una\nexpresi&#xF3;n compatible de ES5:</p>\n<pre><code class=\"language-js\">const fn = () =&gt; 1;\n\n// se convierte en\n\nvar fn = function fn() {\n  return 1;\n};</code></pre>\n<p>Buen comienzo! Pero hay otras funcionalidades de ES2015+ en nuestro c&#xF3;digo\nque quermos transformar. Entonces en lugar de especificar los plugins que\nqueremos utilizar uno por uno, podemos usar un &quot;preset&quot; que ya viene con un\nconjunto predeterminado de plugins a utilizar.</p>\n<p>De la misma manera que con los plugins, tu puedes crear tus propios presets.\nPara nuestro caso, hay un excelente preset llamado <code>env</code>.</p>\n<pre><code class=\"language-sh\">npm install --save-dev @babel/preset-env\n\n./node_modules/.bin/babel src --out-dir lib --presets=@babel/env</code></pre>\n<p>Sin espeficifar ninguna configuraci&#xF3;n, por defecto, este preset incluir&#xE1; todos\nlos plugins que dan soporte a c&#xF3;digo JavaScript moderno (ES2015, ES2016, etc.).\nPero adem&#xE1;s, los presets tambi&#xE9;n pueden recibir opciones desde la terminal.\nVeamos otra forma de pasar opciones: <em>archivos de configuraci&#xF3;n</em>.</p>\n<h2 id=\"configuraci&#xF3;n\">Configuraci&#xF3;n</h2>\n<blockquote>\n<p>Existen algunas formas diferentes de usar archivos de configuraci&#xF3;n\ndependiendo de tus necesidades. Para m&#xE1;s informaci&#xF3;n aseg&#xFA;rate de leer la\ngu&#xED;a extendida sobre c&#xF3;mo\n<a href=\"./03-configuration\">configurar Babel</a>.</p>\n</blockquote>\n<p>Por ahora comencemos creando un archivo que se llame <code>babel.config.js</code> con el\nsiguiente contenido:</p>\n<pre><code class=\"language-js\">const presets = [\n  [\n    &quot;@babel/env&quot;,\n    {\n      targets: {\n        edge: &quot;17&quot;,\n        firefox: &quot;60&quot;,\n        chrome: &quot;67&quot;,\n        safari: &quot;11.1&quot;,\n      },\n    },\n  ],\n];\n\nmodule.exports = { presets };</code></pre>\n<p>A diferencia de antes, ahora <code>env</code> s&#xF3;lo cargar&#xE1; los plugins de transformaci&#xF3;n\npara las funcionalidades que <strong><em>no</em></strong> est&#xE1;n disponibles en nuestros navegadores\nobjetivo. Y listo! Eso es todo lo que necesitamos en relaci&#xF3;n a sintaxis.\nAhora veamos <code>polyfills</code>.</p>\n<h2 id=\"polyfill\">Polyfill</h2>\n<p>El m&#xF3;dulo <a href=\"https://babeljs.io/docs/en/babel-polyfill\" target=\"_blank\">@babel/polyfill</a> incluye\n<a href=\"https://github.com/zloirock/core-js\" target=\"_blank\">core-js</a> y un <a href=\"https://github.com/facebook/regenerator/blob/master/packages/regenerator-runtime/runtime.js\" target=\"_blank\">regenerator runtime</a>\npara emular un entorno ES2015+ completo.</p>\n<p>Esto implica que puedes usar nuevas APIs como <code>Promise</code> o <code>WeakMap</code>,\nm&#xE9;todos est&#xE1;ticos como <code>Array.from</code> o <code>Object.assign</code>, m&#xE9;todos de instancias\ncomo <code>Array.prototype.includes</code>, y funciones generadoras (usando el plugin\n<a href=\"https://babeljs.io/docs/en/babel-plugin-transform-regenerator\" target=\"_blank\">regenerator</a>).\nEl polyfill logra esto inyectando nuevas funcionalidades en el scope\nglobal y en los prototypes nativos, como por ejemplo <code>String</code>.</p>\n<blockquote>\n<p>Para los autores de librer&#xED;as/herramientas quiz&#xE1;s todo eso sea demasiado.\nSi no necesitas m&#xE9;todos de instancias como <code>Array.prototype.includes</code> puedes\nusar el plugin <a href=\"https://babeljs.io/docs/en/babel-plugin-transform-runtime\" target=\"_blank\">transform runtime</a>\nen lugar de <code>@babel/polyfill</code> y as&#xED; no contaminar el scope global.</p>\n</blockquote>\n<p>Para ir un paso m&#xE1;s all&#xE1;, si t&#xFA; sabes ex&#xE1;ctamente para qu&#xE9; funcionalidades\nnecesitas un polyfill, puedes requerirlas directamente desde\n<a href=\"https://github.com/zloirock/core-js#commonjs\" target=\"_blank\">core-js</a>.</p>\n<p>Como en nuestro ejemplo estamos desarrollando una aplicaci&#xF3;n, entonces\ninstalaremos <code>@babel/polyfill</code>:</p>\n<pre><code class=\"language-sh\">npm install --save @babel/polyfill</code></pre>\n<blockquote>\n<p>F&#xED;jate que instalamos este m&#xF3;duluo con la opci&#xF3;n <code>--save</code> en lugar de\n<code>--save-dev</code> ya que esto es un polyfill que necesita inyectarse dentro de\nc&#xF3;digo fuente.</p>\n</blockquote>\n<p>Por suerte para nosotros, estamos usando en preset <code>env</code> que tiene una opci&#xF3;n\n<code>&quot;useBuiltIns&quot;</code> que cuando la seteamos a <code>&quot;usage&quot;</code> va a incluir en cada archivo\ns&#xF3;lo los polyfills necesarios que est&#xE9;n siendo usado. Con esta nueva opci&#xF3;n\nnuestra configuraci&#xF3;n queda de la siguiente manera:</p>\n<pre><code class=\"language-js\">const presets = [\n  [\n    &quot;@babel/env&quot;,\n    {\n      targets: {\n        edge: &quot;17&quot;,\n        firefox: &quot;60&quot;,\n        chrome: &quot;67&quot;,\n        safari: &quot;11.1&quot;,\n      },\n      useBuiltIns: &quot;usage&quot;,\n    },\n  ],\n];\n\nmodule.exports = { presets };</code></pre>\n<p>Babel ahora va a inspeccionar tu c&#xF3;digo para encontrar las funcionalidades\nfaltantes en tus entornos objetivo e incluir s&#xF3;lo los polyfills necesarios.\nPor ejemplo en el siguiente c&#xF3;digo:</p>\n<pre><code class=\"language-js\">Promise.resolve().finally();</code></pre>\n<p>se transformar&#xE1; en esto (ya que Edge 17 no implementa\n<code>Promise.prototype.finally</code>):</p>\n<pre><code class=\"language-js\">require(&quot;core-js/modules/es.promise.finally&quot;);\n\nPromise.resolve().finally();</code></pre>\n<p>Si no estuvieramos usando el preset <code>env</code> con la opci&#xF3;n <code>&quot;useBuiltIns&quot;</code>\nseteada a <code>&quot;usage&quot;</code> hubieramos tenido que hacer un <code>require</code> de todos los\npolyfill <em>una sola vez</em> en el punto de entrada de nuestro c&#xF3;digo.</p>\n<pre><code class=\"language-js\">import &quot;@babel/polyfill&quot;;</code></pre>\n<h2 id=\"resumen\">Resumen</h2>\n<p>En esta unidad, usamos <code>@babel/cli</code> para correr Babel desde la terminal,\n<code>@babel/polyfill</code> para inyectar los polyfills de todas las nuevas APIs de\nJavaScript, y el preset <code>env</code> para s&#xF3;lo incluir las transformaciones y\npolyfills de las funcionalidades faltantes en nuestros navegadores objetivo.</p>\n<p>Para m&#xE1;s informaci&#xF3;n sobre c&#xF3;mo integrar Babel con tu propio entorno, IDE y\ndem&#xE1;s, recuerda visitar la <a href=\"https://babeljs.io/setup.html\" target=\"_blank\">gu&#xED;a interactiva de setup</a>.</p>\n",
          "durationString": "20min"
        },
        "03-configuration": {
          "title": "Guía de configuración",
          "type": "read",
          "format": "self-paced",
          "duration": 10,
          "body": "<p>Babel se puede configurar! Y de varias maneras. En esta unidad visitaremos\ntodas las alternativas de configuraci&#xF3;n que Babel provee y veremos ejemplos\nsimples para cada caso.</p>\n<p>Hay varias otras herramientas que tienen esquemas\nsimilares de configuraci&#xF3;n: ESLint (<code>.eslintrc</code>), Prettier (<code>.prettierrc</code>).</p>\n<h2 id=\"&#xBF;cu&#xE1;l-es-tu-caso-de-uso\">&#xBF;Cu&#xE1;l es tu caso de uso?</h2>\n<ul>\n<li>&#xBF;Quieres crear la configuraci&#xF3;n program&#xE1;ticamente?</li>\n<li>&#xBF;Quieres compilar <code>node_modules</code>?</li>\n</ul>\n<p><strong>Entonces <a href=\"#babelconfigjs\"><code>babel.config.js</code></a> es para t&#xED;!</strong></p>\n<ul>\n<li>&#xBF;Tienes una configuraci&#xF3;n est&#xE1;tica que solo aplica\npara tu &#xFA;nica aplicaci&#xF3;n/m&#xF3;dulo?</li>\n</ul>\n<p><strong>Entonces <a href=\"#babelrc\"><code>.babelrc</code></a> es lo que necesitas!</strong></p>\n<blockquote>\n<p>Babel recomienda el uso del formato <a href=\"config-files.md#project-wide-configuration\"><code>babel.config.js</code></a>.\n<a href=\"https://github.com/babel/babel/blob/master/babel.config.js\" target=\"_blank\">Babel mismo lo utiliza</a>.</p>\n</blockquote>\n<h2 id=\"babelconfigjs\"><code>babel.config.js</code></h2>\n<p>Crea un archivo <code>babel.config.js</code> con el siguiente contenido en el\ndirectorio raiz de tu proyecto (a la altura de <code>package.json</code>).</p>\n<pre><code class=\"language-js\">module.exports = function () {\n  const presets = [ ... ];\n  const plugins = [ ... ];\n\n  return {\n    presets,\n    plugins\n  };\n}</code></pre>\n<p>Consulta la <a href=\"https://babeljs.io/docs/en/config-files#project-wide-configuration\" target=\"_blank\">documentaci&#xF3;n de <code>babel.config.js</code></a>\npara ver todas las opciones de configuraci&#xF3;n.</p>\n<h2 id=\"babelrc\"><code>.babelrc</code></h2>\n<p>Crea en tu proyecto, un archivo <code>.babelrc</code> con el siguiente contenido:</p>\n<pre><code class=\"language-json\">{\n  &quot;presets&quot;: [...],\n  &quot;plugins&quot;: [...]\n}</code></pre>\n<p>Revisa la <a href=\"https://babeljs.io/docs/en/config-files#file-relative-configuration\" target=\"_blank\">documentaci&#xF3;n de <code>.babelrc</code></a>\npara ver todas las opciones de configuraci&#xF3;n.</p>\n<h3 id=\"packagejson\"><code>package.json</code></h3>\n<p>Alternativamente, puedes elegir especificar tu configuraci&#xF3;n de <a href=\"#babelrc\"><code>.babelrc</code></a>\ndentro del mismo <code>package.json</code> usando la entrada <code>babel</code>:</p>\n<pre><code class=\"language-json\">{\n  &quot;name&quot;: &quot;my-package&quot;,\n  &quot;version&quot;: &quot;1.0.0&quot;,\n  &quot;babel&quot;: {\n    &quot;presets&quot;: [ ... ],\n    &quot;plugins&quot;: [ ... ],\n  }\n}</code></pre>\n<h3 id=\"babelrcjs\"><code>.babelrc.js</code></h3>\n<p>Esta configuraci&#xF3;n es an&#xE1;loga a <a href=\"#babelrc\"><code>.babelrc</code></a>, s&#xF3;lo que escrita\nen usando JavaScript.</p>\n<pre><code class=\"language-js\">const presets = [ ... ];\nconst plugins = [ ... ];\n\nmodule.exports = { presets, plugins };</code></pre>\n<p>Aqu&#xED; puedes acceder a todas las APIs de Node.js, por ejemplo para crear una\nconfiguraci&#xF3;n din&#xE1;mica basada en las variables de entorno:</p>\n<pre><code class=\"language-js\">const presets = [ ... ];\nconst plugins = [ ... ];\n\nif (process.env[&quot;ENV&quot;] === &quot;prod&quot;) {\n  plugins.push(...);\n}\n\nmodule.exports = { presets, plugins };</code></pre>\n<h2 id=\"usando-la-l&#xED;nea-de-comandos-babelcli\">Usando la l&#xED;nea de comandos (<code>@babel/cli</code>)</h2>\n<pre><code class=\"language-sh\">babel --plugins @babel/plugin-transform-arrow-functions script.js</code></pre>\n<p>Revisa la <a href=\"https://babeljs.io/docs/en/babel-cli\" target=\"_blank\">documentaci&#xF3;n de <code>@babel/cli</code></a>\npara ver todas las opciones de configuraci&#xF3;n.</p>\n<h2 id=\"usando-la-api-babelcore\">Usando la API (<code>@babel/core</code>)</h2>\n<pre><code class=\"language-js\">require(&quot;@babel/core&quot;).transform(&quot;code&quot;, {\n  plugins: [&quot;@babel/plugin-transform-arrow-functions&quot;]\n});</code></pre>\n<p>Revisa la <a href=\"https://babeljs.io/docs/en/babel-core\" target=\"_blank\">documentaci&#xF3;n de <code>@babel/core</code></a>\npara ver todas las opciones de configuraci&#xF3;n.</p>\n",
          "durationString": "10min"
        }
      },
      "order": 0,
      "stats": {
        "duration": 40,
        "durationString": "40min",
        "exerciseCount": 0,
        "partCount": 3
      }
    }
  },
  "grades": "",
  "contributors": "<ul>\n<li>Mariano Crowe (autor)</li>\n<li>Lupo Montero (coordinador)</li>\n</ul>\n",
  "books": "",
  "benchmarks": "",
  "references": "<ul>\n<li><a href=\"https://babeljs.io/docs\">Docs</a></li>\n<li><a href=\"https://babeljs.io/repl\">Try it out!</a></li>\n</ul>\n",
  "stats": {
    "duration": 50,
    "durationString": "50min",
    "exerciseCount": 0,
    "unitCount": 1,
    "partCount": 3
  }
}
